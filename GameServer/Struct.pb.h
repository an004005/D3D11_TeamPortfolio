// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Matrix;
struct MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerSyncData;
struct PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Matrix* Arena::CreateMaybeMessage<::Protocol::Matrix>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::PlayerSyncData* Arena::CreateMaybeMessage<::Protocol::PlayerSyncData>(Arena*);
template<> ::Protocol::Vector2* Arena::CreateMaybeMessage<::Protocol::Vector2>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit PROTOBUF_CONSTEXPR Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2& from) {
    Vector2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Matrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {}
  ~Matrix() override;
  explicit PROTOBUF_CONSTEXPR Matrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix& from) {
    Matrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Matrix";
  }
  protected:
  explicit Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVRightFieldNumber = 1,
    kVUpFieldNumber = 2,
    kVLookFieldNumber = 3,
    kVPosFieldNumber = 4,
  };
  // .Protocol.Vector3 vRight = 1;
  bool has_vright() const;
  private:
  bool _internal_has_vright() const;
  public:
  void clear_vright();
  const ::Protocol::Vector3& vright() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_vright();
  ::Protocol::Vector3* mutable_vright();
  void set_allocated_vright(::Protocol::Vector3* vright);
  private:
  const ::Protocol::Vector3& _internal_vright() const;
  ::Protocol::Vector3* _internal_mutable_vright();
  public:
  void unsafe_arena_set_allocated_vright(
      ::Protocol::Vector3* vright);
  ::Protocol::Vector3* unsafe_arena_release_vright();

  // .Protocol.Vector3 vUp = 2;
  bool has_vup() const;
  private:
  bool _internal_has_vup() const;
  public:
  void clear_vup();
  const ::Protocol::Vector3& vup() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_vup();
  ::Protocol::Vector3* mutable_vup();
  void set_allocated_vup(::Protocol::Vector3* vup);
  private:
  const ::Protocol::Vector3& _internal_vup() const;
  ::Protocol::Vector3* _internal_mutable_vup();
  public:
  void unsafe_arena_set_allocated_vup(
      ::Protocol::Vector3* vup);
  ::Protocol::Vector3* unsafe_arena_release_vup();

  // .Protocol.Vector3 vLook = 3;
  bool has_vlook() const;
  private:
  bool _internal_has_vlook() const;
  public:
  void clear_vlook();
  const ::Protocol::Vector3& vlook() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_vlook();
  ::Protocol::Vector3* mutable_vlook();
  void set_allocated_vlook(::Protocol::Vector3* vlook);
  private:
  const ::Protocol::Vector3& _internal_vlook() const;
  ::Protocol::Vector3* _internal_mutable_vlook();
  public:
  void unsafe_arena_set_allocated_vlook(
      ::Protocol::Vector3* vlook);
  ::Protocol::Vector3* unsafe_arena_release_vlook();

  // .Protocol.Vector3 vPos = 4;
  bool has_vpos() const;
  private:
  bool _internal_has_vpos() const;
  public:
  void clear_vpos();
  const ::Protocol::Vector3& vpos() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_vpos();
  ::Protocol::Vector3* mutable_vpos();
  void set_allocated_vpos(::Protocol::Vector3* vpos);
  private:
  const ::Protocol::Vector3& _internal_vpos() const;
  ::Protocol::Vector3* _internal_mutable_vpos();
  public:
  void unsafe_arena_set_allocated_vpos(
      ::Protocol::Vector3* vpos);
  ::Protocol::Vector3* unsafe_arena_release_vpos();

  // @@protoc_insertion_point(class_scope:Protocol.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* vright_;
    ::Protocol::Vector3* vup_;
    ::Protocol::Vector3* vlook_;
    ::Protocol::Vector3* vpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerSyncData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerSyncData) */ {
 public:
  inline PlayerSyncData() : PlayerSyncData(nullptr) {}
  ~PlayerSyncData() override;
  explicit PROTOBUF_CONSTEXPR PlayerSyncData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSyncData(const PlayerSyncData& from);
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSyncData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSyncData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSyncData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSyncData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSyncData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSyncData& from) {
    PlayerSyncData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerSyncData";
  }
  protected:
  explicit PlayerSyncData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMouseAxisFieldNumber = 2,
    kInputMaskFieldNumber = 1,
  };
  // .Protocol.Vector2 mouseAxis = 2;
  bool has_mouseaxis() const;
  private:
  bool _internal_has_mouseaxis() const;
  public:
  void clear_mouseaxis();
  const ::Protocol::Vector2& mouseaxis() const;
  PROTOBUF_NODISCARD ::Protocol::Vector2* release_mouseaxis();
  ::Protocol::Vector2* mutable_mouseaxis();
  void set_allocated_mouseaxis(::Protocol::Vector2* mouseaxis);
  private:
  const ::Protocol::Vector2& _internal_mouseaxis() const;
  ::Protocol::Vector2* _internal_mutable_mouseaxis();
  public:
  void unsafe_arena_set_allocated_mouseaxis(
      ::Protocol::Vector2* mouseaxis);
  ::Protocol::Vector2* unsafe_arena_release_mouseaxis();

  // uint32 inputMask = 1;
  void clear_inputmask();
  uint32_t inputmask() const;
  void set_inputmask(uint32_t value);
  private:
  uint32_t _internal_inputmask() const;
  void _internal_set_inputmask(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerSyncData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector2* mouseaxis_;
    uint32_t inputmask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Player::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Player::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// Matrix

// .Protocol.Vector3 vRight = 1;
inline bool Matrix::_internal_has_vright() const {
  return this != internal_default_instance() && _impl_.vright_ != nullptr;
}
inline bool Matrix::has_vright() const {
  return _internal_has_vright();
}
inline void Matrix::clear_vright() {
  if (GetArenaForAllocation() == nullptr && _impl_.vright_ != nullptr) {
    delete _impl_.vright_;
  }
  _impl_.vright_ = nullptr;
}
inline const ::Protocol::Vector3& Matrix::_internal_vright() const {
  const ::Protocol::Vector3* p = _impl_.vright_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& Matrix::vright() const {
  // @@protoc_insertion_point(field_get:Protocol.Matrix.vRight)
  return _internal_vright();
}
inline void Matrix::unsafe_arena_set_allocated_vright(
    ::Protocol::Vector3* vright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vright_);
  }
  _impl_.vright_ = vright;
  if (vright) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Matrix.vRight)
}
inline ::Protocol::Vector3* Matrix::release_vright() {
  
  ::Protocol::Vector3* temp = _impl_.vright_;
  _impl_.vright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* Matrix::unsafe_arena_release_vright() {
  // @@protoc_insertion_point(field_release:Protocol.Matrix.vRight)
  
  ::Protocol::Vector3* temp = _impl_.vright_;
  _impl_.vright_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* Matrix::_internal_mutable_vright() {
  
  if (_impl_.vright_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.vright_ = p;
  }
  return _impl_.vright_;
}
inline ::Protocol::Vector3* Matrix::mutable_vright() {
  ::Protocol::Vector3* _msg = _internal_mutable_vright();
  // @@protoc_insertion_point(field_mutable:Protocol.Matrix.vRight)
  return _msg;
}
inline void Matrix::set_allocated_vright(::Protocol::Vector3* vright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vright_;
  }
  if (vright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vright);
    if (message_arena != submessage_arena) {
      vright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vright, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vright_ = vright;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Matrix.vRight)
}

// .Protocol.Vector3 vUp = 2;
inline bool Matrix::_internal_has_vup() const {
  return this != internal_default_instance() && _impl_.vup_ != nullptr;
}
inline bool Matrix::has_vup() const {
  return _internal_has_vup();
}
inline void Matrix::clear_vup() {
  if (GetArenaForAllocation() == nullptr && _impl_.vup_ != nullptr) {
    delete _impl_.vup_;
  }
  _impl_.vup_ = nullptr;
}
inline const ::Protocol::Vector3& Matrix::_internal_vup() const {
  const ::Protocol::Vector3* p = _impl_.vup_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& Matrix::vup() const {
  // @@protoc_insertion_point(field_get:Protocol.Matrix.vUp)
  return _internal_vup();
}
inline void Matrix::unsafe_arena_set_allocated_vup(
    ::Protocol::Vector3* vup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vup_);
  }
  _impl_.vup_ = vup;
  if (vup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Matrix.vUp)
}
inline ::Protocol::Vector3* Matrix::release_vup() {
  
  ::Protocol::Vector3* temp = _impl_.vup_;
  _impl_.vup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* Matrix::unsafe_arena_release_vup() {
  // @@protoc_insertion_point(field_release:Protocol.Matrix.vUp)
  
  ::Protocol::Vector3* temp = _impl_.vup_;
  _impl_.vup_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* Matrix::_internal_mutable_vup() {
  
  if (_impl_.vup_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.vup_ = p;
  }
  return _impl_.vup_;
}
inline ::Protocol::Vector3* Matrix::mutable_vup() {
  ::Protocol::Vector3* _msg = _internal_mutable_vup();
  // @@protoc_insertion_point(field_mutable:Protocol.Matrix.vUp)
  return _msg;
}
inline void Matrix::set_allocated_vup(::Protocol::Vector3* vup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vup_;
  }
  if (vup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vup);
    if (message_arena != submessage_arena) {
      vup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vup_ = vup;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Matrix.vUp)
}

// .Protocol.Vector3 vLook = 3;
inline bool Matrix::_internal_has_vlook() const {
  return this != internal_default_instance() && _impl_.vlook_ != nullptr;
}
inline bool Matrix::has_vlook() const {
  return _internal_has_vlook();
}
inline void Matrix::clear_vlook() {
  if (GetArenaForAllocation() == nullptr && _impl_.vlook_ != nullptr) {
    delete _impl_.vlook_;
  }
  _impl_.vlook_ = nullptr;
}
inline const ::Protocol::Vector3& Matrix::_internal_vlook() const {
  const ::Protocol::Vector3* p = _impl_.vlook_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& Matrix::vlook() const {
  // @@protoc_insertion_point(field_get:Protocol.Matrix.vLook)
  return _internal_vlook();
}
inline void Matrix::unsafe_arena_set_allocated_vlook(
    ::Protocol::Vector3* vlook) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vlook_);
  }
  _impl_.vlook_ = vlook;
  if (vlook) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Matrix.vLook)
}
inline ::Protocol::Vector3* Matrix::release_vlook() {
  
  ::Protocol::Vector3* temp = _impl_.vlook_;
  _impl_.vlook_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* Matrix::unsafe_arena_release_vlook() {
  // @@protoc_insertion_point(field_release:Protocol.Matrix.vLook)
  
  ::Protocol::Vector3* temp = _impl_.vlook_;
  _impl_.vlook_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* Matrix::_internal_mutable_vlook() {
  
  if (_impl_.vlook_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.vlook_ = p;
  }
  return _impl_.vlook_;
}
inline ::Protocol::Vector3* Matrix::mutable_vlook() {
  ::Protocol::Vector3* _msg = _internal_mutable_vlook();
  // @@protoc_insertion_point(field_mutable:Protocol.Matrix.vLook)
  return _msg;
}
inline void Matrix::set_allocated_vlook(::Protocol::Vector3* vlook) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vlook_;
  }
  if (vlook) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vlook);
    if (message_arena != submessage_arena) {
      vlook = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vlook, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vlook_ = vlook;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Matrix.vLook)
}

// .Protocol.Vector3 vPos = 4;
inline bool Matrix::_internal_has_vpos() const {
  return this != internal_default_instance() && _impl_.vpos_ != nullptr;
}
inline bool Matrix::has_vpos() const {
  return _internal_has_vpos();
}
inline void Matrix::clear_vpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.vpos_ != nullptr) {
    delete _impl_.vpos_;
  }
  _impl_.vpos_ = nullptr;
}
inline const ::Protocol::Vector3& Matrix::_internal_vpos() const {
  const ::Protocol::Vector3* p = _impl_.vpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& Matrix::vpos() const {
  // @@protoc_insertion_point(field_get:Protocol.Matrix.vPos)
  return _internal_vpos();
}
inline void Matrix::unsafe_arena_set_allocated_vpos(
    ::Protocol::Vector3* vpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vpos_);
  }
  _impl_.vpos_ = vpos;
  if (vpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Matrix.vPos)
}
inline ::Protocol::Vector3* Matrix::release_vpos() {
  
  ::Protocol::Vector3* temp = _impl_.vpos_;
  _impl_.vpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* Matrix::unsafe_arena_release_vpos() {
  // @@protoc_insertion_point(field_release:Protocol.Matrix.vPos)
  
  ::Protocol::Vector3* temp = _impl_.vpos_;
  _impl_.vpos_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* Matrix::_internal_mutable_vpos() {
  
  if (_impl_.vpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.vpos_ = p;
  }
  return _impl_.vpos_;
}
inline ::Protocol::Vector3* Matrix::mutable_vpos() {
  ::Protocol::Vector3* _msg = _internal_mutable_vpos();
  // @@protoc_insertion_point(field_mutable:Protocol.Matrix.vPos)
  return _msg;
}
inline void Matrix::set_allocated_vpos(::Protocol::Vector3* vpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vpos_;
  }
  if (vpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vpos);
    if (message_arena != submessage_arena) {
      vpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vpos_ = vpos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Matrix.vPos)
}

// -------------------------------------------------------------------

// PlayerSyncData

// uint32 inputMask = 1;
inline void PlayerSyncData::clear_inputmask() {
  _impl_.inputmask_ = 0u;
}
inline uint32_t PlayerSyncData::_internal_inputmask() const {
  return _impl_.inputmask_;
}
inline uint32_t PlayerSyncData::inputmask() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerSyncData.inputMask)
  return _internal_inputmask();
}
inline void PlayerSyncData::_internal_set_inputmask(uint32_t value) {
  
  _impl_.inputmask_ = value;
}
inline void PlayerSyncData::set_inputmask(uint32_t value) {
  _internal_set_inputmask(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerSyncData.inputMask)
}

// .Protocol.Vector2 mouseAxis = 2;
inline bool PlayerSyncData::_internal_has_mouseaxis() const {
  return this != internal_default_instance() && _impl_.mouseaxis_ != nullptr;
}
inline bool PlayerSyncData::has_mouseaxis() const {
  return _internal_has_mouseaxis();
}
inline void PlayerSyncData::clear_mouseaxis() {
  if (GetArenaForAllocation() == nullptr && _impl_.mouseaxis_ != nullptr) {
    delete _impl_.mouseaxis_;
  }
  _impl_.mouseaxis_ = nullptr;
}
inline const ::Protocol::Vector2& PlayerSyncData::_internal_mouseaxis() const {
  const ::Protocol::Vector2* p = _impl_.mouseaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector2&>(
      ::Protocol::_Vector2_default_instance_);
}
inline const ::Protocol::Vector2& PlayerSyncData::mouseaxis() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerSyncData.mouseAxis)
  return _internal_mouseaxis();
}
inline void PlayerSyncData::unsafe_arena_set_allocated_mouseaxis(
    ::Protocol::Vector2* mouseaxis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mouseaxis_);
  }
  _impl_.mouseaxis_ = mouseaxis;
  if (mouseaxis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerSyncData.mouseAxis)
}
inline ::Protocol::Vector2* PlayerSyncData::release_mouseaxis() {
  
  ::Protocol::Vector2* temp = _impl_.mouseaxis_;
  _impl_.mouseaxis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector2* PlayerSyncData::unsafe_arena_release_mouseaxis() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerSyncData.mouseAxis)
  
  ::Protocol::Vector2* temp = _impl_.mouseaxis_;
  _impl_.mouseaxis_ = nullptr;
  return temp;
}
inline ::Protocol::Vector2* PlayerSyncData::_internal_mutable_mouseaxis() {
  
  if (_impl_.mouseaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector2>(GetArenaForAllocation());
    _impl_.mouseaxis_ = p;
  }
  return _impl_.mouseaxis_;
}
inline ::Protocol::Vector2* PlayerSyncData::mutable_mouseaxis() {
  ::Protocol::Vector2* _msg = _internal_mutable_mouseaxis();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerSyncData.mouseAxis)
  return _msg;
}
inline void PlayerSyncData::set_allocated_mouseaxis(::Protocol::Vector2* mouseaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mouseaxis_;
  }
  if (mouseaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mouseaxis);
    if (message_arena != submessage_arena) {
      mouseaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouseaxis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mouseaxis_ = mouseaxis;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerSyncData.mouseAxis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
