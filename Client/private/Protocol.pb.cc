// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized) {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_EXIT::S_PLAYER_EXIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_EXITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_EXITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_EXITDefaultTypeInternal() {}
  union {
    S_PLAYER_EXIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_EXITDefaultTypeInternal _S_PLAYER_EXIT_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_ACTION_SYNC::C_PLAYER_ACTION_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.syncdata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_ACTION_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_ACTION_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_ACTION_SYNCDefaultTypeInternal() {}
  union {
    C_PLAYER_ACTION_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_ACTION_SYNCDefaultTypeInternal _C_PLAYER_ACTION_SYNC_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_ACTION_SYNC::S_PLAYER_ACTION_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.syncdata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_ACTION_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_ACTION_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_ACTION_SYNCDefaultTypeInternal() {}
  union {
    S_PLAYER_ACTION_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_ACTION_SYNCDefaultTypeInternal _S_PLAYER_ACTION_SYNC_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_ACTION_SYNC_MATRIX::C_PLAYER_ACTION_SYNC_MATRIX(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.syncdata_)*/nullptr
  , /*decltype(_impl_.world_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal() {}
  union {
    C_PLAYER_ACTION_SYNC_MATRIX _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal _C_PLAYER_ACTION_SYNC_MATRIX_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_ACTION_SYNC_MATRIX::S_PLAYER_ACTION_SYNC_MATRIX(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.syncdata_)*/nullptr
  , /*decltype(_impl_.world_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal() {}
  union {
    S_PLAYER_ACTION_SYNC_MATRIX _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_ACTION_SYNC_MATRIXDefaultTypeInternal _S_PLAYER_ACTION_SYNC_MATRIX_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EXIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EXIT, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC, _impl_.syncdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC, _impl_.syncdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC_MATRIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC_MATRIX, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC_MATRIX, _impl_.syncdata_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION_SYNC_MATRIX, _impl_.world_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC_MATRIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC_MATRIX, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC_MATRIX, _impl_.syncdata_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION_SYNC_MATRIX, _impl_.world_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 6, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 13, -1, -1, sizeof(::Protocol::S_PLAYER_EXIT)},
  { 20, -1, -1, sizeof(::Protocol::C_PLAYER_ACTION_SYNC)},
  { 28, -1, -1, sizeof(::Protocol::S_PLAYER_ACTION_SYNC)},
  { 36, -1, -1, sizeof(::Protocol::C_PLAYER_ACTION_SYNC_MATRIX)},
  { 45, -1, -1, sizeof(::Protocol::S_PLAYER_ACTION_SYNC_MATRIX)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_S_PLAYER_EXIT_default_instance_._instance,
  &::Protocol::_C_PLAYER_ACTION_SYNC_default_instance_._instance,
  &::Protocol::_S_PLAYER_ACTION_SYNC_default_instance_._instance,
  &::Protocol::_C_PLAYER_ACTION_SYNC_MATRIX_default_instance_._instance,
  &::Protocol::_S_PLAYER_ACTION_SYNC_MATRIX_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\t\n\007C_LOGIN\"\033\n\007S_LOGIN\022\020\n\010pl"
  "ayerID\030\001 \001(\r\"1\n\rS_PLAYER_EXIT\022 \n\006player\030"
  "\001 \001(\0132\020.Protocol.Player\"d\n\024C_PLAYER_ACTI"
  "ON_SYNC\022 \n\006player\030\001 \001(\0132\020.Protocol.Playe"
  "r\022*\n\010syncData\030\002 \001(\0132\030.Protocol.PlayerSyn"
  "cData\"d\n\024S_PLAYER_ACTION_SYNC\022 \n\006player\030"
  "\001 \001(\0132\020.Protocol.Player\022*\n\010syncData\030\002 \001("
  "\0132\030.Protocol.PlayerSyncData\"\214\001\n\033C_PLAYER"
  "_ACTION_SYNC_MATRIX\022 \n\006player\030\001 \001(\0132\020.Pr"
  "otocol.Player\022*\n\010syncData\030\002 \001(\0132\030.Protoc"
  "ol.PlayerSyncData\022\037\n\005world\030\003 \001(\0132\020.Proto"
  "col.Matrix\"\214\001\n\033S_PLAYER_ACTION_SYNC_MATR"
  "IX\022 \n\006player\030\001 \001(\0132\020.Protocol.Player\022*\n\010"
  "syncData\030\002 \001(\0132\030.Protocol.PlayerSyncData"
  "\022\037\n\005world\030\003 \001(\0132\020.Protocol.Matrixb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 641, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LOGIN* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_PLAYER_EXIT::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_EXIT* msg);
};

const ::Protocol::Player&
S_PLAYER_EXIT::_Internal::player(const S_PLAYER_EXIT* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_EXIT::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_EXIT::S_PLAYER_EXIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_EXIT)
}
S_PLAYER_EXIT::S_PLAYER_EXIT(const S_PLAYER_EXIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_EXIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_EXIT)
}

inline void S_PLAYER_EXIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_EXIT::~S_PLAYER_EXIT() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_EXIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_EXIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_EXIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_EXIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_EXIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_EXIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_EXIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_EXIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_EXIT)
  return target;
}

size_t S_PLAYER_EXIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_EXIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_EXIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_EXIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_EXIT::GetClassData() const { return &_class_data_; }


void S_PLAYER_EXIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_EXIT*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_EXIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_EXIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_EXIT::CopyFrom(const S_PLAYER_EXIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_EXIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_EXIT::IsInitialized() const {
  return true;
}

void S_PLAYER_EXIT::InternalSwap(S_PLAYER_EXIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_EXIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C_PLAYER_ACTION_SYNC::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_ACTION_SYNC* msg);
  static const ::Protocol::PlayerSyncData& syncdata(const C_PLAYER_ACTION_SYNC* msg);
};

const ::Protocol::Player&
C_PLAYER_ACTION_SYNC::_Internal::player(const C_PLAYER_ACTION_SYNC* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::PlayerSyncData&
C_PLAYER_ACTION_SYNC::_Internal::syncdata(const C_PLAYER_ACTION_SYNC* msg) {
  return *msg->_impl_.syncdata_;
}
void C_PLAYER_ACTION_SYNC::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void C_PLAYER_ACTION_SYNC::clear_syncdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
}
C_PLAYER_ACTION_SYNC::C_PLAYER_ACTION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ACTION_SYNC)
}
C_PLAYER_ACTION_SYNC::C_PLAYER_ACTION_SYNC(const C_PLAYER_ACTION_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_ACTION_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_syncdata()) {
    _this->_impl_.syncdata_ = new ::Protocol::PlayerSyncData(*from._impl_.syncdata_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ACTION_SYNC)
}

inline void C_PLAYER_ACTION_SYNC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_ACTION_SYNC::~C_PLAYER_ACTION_SYNC() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ACTION_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_ACTION_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.syncdata_;
}

void C_PLAYER_ACTION_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_ACTION_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ACTION_SYNC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_ACTION_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSyncData syncData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_ACTION_SYNC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ACTION_SYNC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::syncdata(this),
        _Internal::syncdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ACTION_SYNC)
  return target;
}

size_t C_PLAYER_ACTION_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ACTION_SYNC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.syncdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_ACTION_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_ACTION_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_ACTION_SYNC::GetClassData() const { return &_class_data_; }


void C_PLAYER_ACTION_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_ACTION_SYNC*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_ACTION_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ACTION_SYNC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_syncdata()) {
    _this->_internal_mutable_syncdata()->::Protocol::PlayerSyncData::MergeFrom(
        from._internal_syncdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_ACTION_SYNC::CopyFrom(const C_PLAYER_ACTION_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ACTION_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_ACTION_SYNC::IsInitialized() const {
  return true;
}

void C_PLAYER_ACTION_SYNC::InternalSwap(C_PLAYER_ACTION_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION_SYNC, _impl_.syncdata_)
      + sizeof(C_PLAYER_ACTION_SYNC::_impl_.syncdata_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION_SYNC, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ACTION_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_PLAYER_ACTION_SYNC::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_ACTION_SYNC* msg);
  static const ::Protocol::PlayerSyncData& syncdata(const S_PLAYER_ACTION_SYNC* msg);
};

const ::Protocol::Player&
S_PLAYER_ACTION_SYNC::_Internal::player(const S_PLAYER_ACTION_SYNC* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::PlayerSyncData&
S_PLAYER_ACTION_SYNC::_Internal::syncdata(const S_PLAYER_ACTION_SYNC* msg) {
  return *msg->_impl_.syncdata_;
}
void S_PLAYER_ACTION_SYNC::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void S_PLAYER_ACTION_SYNC::clear_syncdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
}
S_PLAYER_ACTION_SYNC::S_PLAYER_ACTION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ACTION_SYNC)
}
S_PLAYER_ACTION_SYNC::S_PLAYER_ACTION_SYNC(const S_PLAYER_ACTION_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_ACTION_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_syncdata()) {
    _this->_impl_.syncdata_ = new ::Protocol::PlayerSyncData(*from._impl_.syncdata_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ACTION_SYNC)
}

inline void S_PLAYER_ACTION_SYNC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_ACTION_SYNC::~S_PLAYER_ACTION_SYNC() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ACTION_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_ACTION_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.syncdata_;
}

void S_PLAYER_ACTION_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_ACTION_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ACTION_SYNC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_ACTION_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSyncData syncData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_ACTION_SYNC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ACTION_SYNC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::syncdata(this),
        _Internal::syncdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ACTION_SYNC)
  return target;
}

size_t S_PLAYER_ACTION_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ACTION_SYNC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.syncdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_ACTION_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_ACTION_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_ACTION_SYNC::GetClassData() const { return &_class_data_; }


void S_PLAYER_ACTION_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_ACTION_SYNC*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_ACTION_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ACTION_SYNC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_syncdata()) {
    _this->_internal_mutable_syncdata()->::Protocol::PlayerSyncData::MergeFrom(
        from._internal_syncdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_ACTION_SYNC::CopyFrom(const S_PLAYER_ACTION_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ACTION_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_ACTION_SYNC::IsInitialized() const {
  return true;
}

void S_PLAYER_ACTION_SYNC::InternalSwap(S_PLAYER_ACTION_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION_SYNC, _impl_.syncdata_)
      + sizeof(S_PLAYER_ACTION_SYNC::_impl_.syncdata_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION_SYNC, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ACTION_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C_PLAYER_ACTION_SYNC_MATRIX::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_ACTION_SYNC_MATRIX* msg);
  static const ::Protocol::PlayerSyncData& syncdata(const C_PLAYER_ACTION_SYNC_MATRIX* msg);
  static const ::Protocol::Matrix& world(const C_PLAYER_ACTION_SYNC_MATRIX* msg);
};

const ::Protocol::Player&
C_PLAYER_ACTION_SYNC_MATRIX::_Internal::player(const C_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::PlayerSyncData&
C_PLAYER_ACTION_SYNC_MATRIX::_Internal::syncdata(const C_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.syncdata_;
}
const ::Protocol::Matrix&
C_PLAYER_ACTION_SYNC_MATRIX::_Internal::world(const C_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.world_;
}
void C_PLAYER_ACTION_SYNC_MATRIX::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void C_PLAYER_ACTION_SYNC_MATRIX::clear_syncdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
}
void C_PLAYER_ACTION_SYNC_MATRIX::clear_world() {
  if (GetArenaForAllocation() == nullptr && _impl_.world_ != nullptr) {
    delete _impl_.world_;
  }
  _impl_.world_ = nullptr;
}
C_PLAYER_ACTION_SYNC_MATRIX::C_PLAYER_ACTION_SYNC_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
}
C_PLAYER_ACTION_SYNC_MATRIX::C_PLAYER_ACTION_SYNC_MATRIX(const C_PLAYER_ACTION_SYNC_MATRIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_ACTION_SYNC_MATRIX* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , decltype(_impl_.world_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_syncdata()) {
    _this->_impl_.syncdata_ = new ::Protocol::PlayerSyncData(*from._impl_.syncdata_);
  }
  if (from._internal_has_world()) {
    _this->_impl_.world_ = new ::Protocol::Matrix(*from._impl_.world_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
}

inline void C_PLAYER_ACTION_SYNC_MATRIX::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , decltype(_impl_.world_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_ACTION_SYNC_MATRIX::~C_PLAYER_ACTION_SYNC_MATRIX() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_ACTION_SYNC_MATRIX::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.syncdata_;
  if (this != internal_default_instance()) delete _impl_.world_;
}

void C_PLAYER_ACTION_SYNC_MATRIX::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_ACTION_SYNC_MATRIX::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.world_ != nullptr) {
    delete _impl_.world_;
  }
  _impl_.world_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_ACTION_SYNC_MATRIX::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSyncData syncData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix world = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_ACTION_SYNC_MATRIX::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::syncdata(this),
        _Internal::syncdata(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Matrix world = 3;
  if (this->_internal_has_world()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world(this),
        _Internal::world(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  return target;
}

size_t C_PLAYER_ACTION_SYNC_MATRIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.syncdata_);
  }

  // .Protocol.Matrix world = 3;
  if (this->_internal_has_world()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.world_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_ACTION_SYNC_MATRIX::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_ACTION_SYNC_MATRIX::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_ACTION_SYNC_MATRIX::GetClassData() const { return &_class_data_; }


void C_PLAYER_ACTION_SYNC_MATRIX::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_ACTION_SYNC_MATRIX*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_ACTION_SYNC_MATRIX&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_syncdata()) {
    _this->_internal_mutable_syncdata()->::Protocol::PlayerSyncData::MergeFrom(
        from._internal_syncdata());
  }
  if (from._internal_has_world()) {
    _this->_internal_mutable_world()->::Protocol::Matrix::MergeFrom(
        from._internal_world());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_ACTION_SYNC_MATRIX::CopyFrom(const C_PLAYER_ACTION_SYNC_MATRIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ACTION_SYNC_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_ACTION_SYNC_MATRIX::IsInitialized() const {
  return true;
}

void C_PLAYER_ACTION_SYNC_MATRIX::InternalSwap(C_PLAYER_ACTION_SYNC_MATRIX* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION_SYNC_MATRIX, _impl_.world_)
      + sizeof(C_PLAYER_ACTION_SYNC_MATRIX::_impl_.world_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION_SYNC_MATRIX, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ACTION_SYNC_MATRIX::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_PLAYER_ACTION_SYNC_MATRIX::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_ACTION_SYNC_MATRIX* msg);
  static const ::Protocol::PlayerSyncData& syncdata(const S_PLAYER_ACTION_SYNC_MATRIX* msg);
  static const ::Protocol::Matrix& world(const S_PLAYER_ACTION_SYNC_MATRIX* msg);
};

const ::Protocol::Player&
S_PLAYER_ACTION_SYNC_MATRIX::_Internal::player(const S_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::PlayerSyncData&
S_PLAYER_ACTION_SYNC_MATRIX::_Internal::syncdata(const S_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.syncdata_;
}
const ::Protocol::Matrix&
S_PLAYER_ACTION_SYNC_MATRIX::_Internal::world(const S_PLAYER_ACTION_SYNC_MATRIX* msg) {
  return *msg->_impl_.world_;
}
void S_PLAYER_ACTION_SYNC_MATRIX::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void S_PLAYER_ACTION_SYNC_MATRIX::clear_syncdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
}
void S_PLAYER_ACTION_SYNC_MATRIX::clear_world() {
  if (GetArenaForAllocation() == nullptr && _impl_.world_ != nullptr) {
    delete _impl_.world_;
  }
  _impl_.world_ = nullptr;
}
S_PLAYER_ACTION_SYNC_MATRIX::S_PLAYER_ACTION_SYNC_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
}
S_PLAYER_ACTION_SYNC_MATRIX::S_PLAYER_ACTION_SYNC_MATRIX(const S_PLAYER_ACTION_SYNC_MATRIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_ACTION_SYNC_MATRIX* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , decltype(_impl_.world_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_syncdata()) {
    _this->_impl_.syncdata_ = new ::Protocol::PlayerSyncData(*from._impl_.syncdata_);
  }
  if (from._internal_has_world()) {
    _this->_impl_.world_ = new ::Protocol::Matrix(*from._impl_.world_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
}

inline void S_PLAYER_ACTION_SYNC_MATRIX::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.syncdata_){nullptr}
    , decltype(_impl_.world_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_ACTION_SYNC_MATRIX::~S_PLAYER_ACTION_SYNC_MATRIX() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_ACTION_SYNC_MATRIX::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.syncdata_;
  if (this != internal_default_instance()) delete _impl_.world_;
}

void S_PLAYER_ACTION_SYNC_MATRIX::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_ACTION_SYNC_MATRIX::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.syncdata_ != nullptr) {
    delete _impl_.syncdata_;
  }
  _impl_.syncdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.world_ != nullptr) {
    delete _impl_.world_;
  }
  _impl_.world_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_ACTION_SYNC_MATRIX::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSyncData syncData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix world = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_ACTION_SYNC_MATRIX::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::syncdata(this),
        _Internal::syncdata(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Matrix world = 3;
  if (this->_internal_has_world()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world(this),
        _Internal::world(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  return target;
}

size_t S_PLAYER_ACTION_SYNC_MATRIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSyncData syncData = 2;
  if (this->_internal_has_syncdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.syncdata_);
  }

  // .Protocol.Matrix world = 3;
  if (this->_internal_has_world()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.world_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_ACTION_SYNC_MATRIX::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_ACTION_SYNC_MATRIX::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_ACTION_SYNC_MATRIX::GetClassData() const { return &_class_data_; }


void S_PLAYER_ACTION_SYNC_MATRIX::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_ACTION_SYNC_MATRIX*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_ACTION_SYNC_MATRIX&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_syncdata()) {
    _this->_internal_mutable_syncdata()->::Protocol::PlayerSyncData::MergeFrom(
        from._internal_syncdata());
  }
  if (from._internal_has_world()) {
    _this->_internal_mutable_world()->::Protocol::Matrix::MergeFrom(
        from._internal_world());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_ACTION_SYNC_MATRIX::CopyFrom(const S_PLAYER_ACTION_SYNC_MATRIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ACTION_SYNC_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_ACTION_SYNC_MATRIX::IsInitialized() const {
  return true;
}

void S_PLAYER_ACTION_SYNC_MATRIX::InternalSwap(S_PLAYER_ACTION_SYNC_MATRIX* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION_SYNC_MATRIX, _impl_.world_)
      + sizeof(S_PLAYER_ACTION_SYNC_MATRIX::_impl_.world_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION_SYNC_MATRIX, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ACTION_SYNC_MATRIX::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_EXIT*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_EXIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_EXIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_ACTION_SYNC*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ACTION_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ACTION_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_ACTION_SYNC*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ACTION_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ACTION_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_ACTION_SYNC_MATRIX*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ACTION_SYNC_MATRIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ACTION_SYNC_MATRIX >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_ACTION_SYNC_MATRIX*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ACTION_SYNC_MATRIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ACTION_SYNC_MATRIX >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
